#!/bin/sh
# Variable symmetry donor calculation versus donor position across a
# a quantum well
# Initialise files

rm -f e-r_d.r l-r_d.r zeta-r_d.r

# Initialise `job' file, just write any old `junk' to it, importantly make
# it executable

echo "junk" > d0.job

chmod u+x d0.job

# Manually create s.r

echo '200 0.1 0.0
100 0.0 0.0
200 0.1 0.0' > s.r

# Generate alloy profile

efsx		

# Generate potential profile

efxv		

# Loop over donor positions---usually define them all together in a single
# file `r_d.r' but doing things different here

for R_D in 250e-10 240e-10 220e-10 200e-10 180e-10 160e-10 120e-10 80e-10 40e-10 00e-10
do
{
# Create donor position file

echo -n $R_D > r_d.r

# Now going to use quick 3D (spherical trial wave function) to give an
# approximate Bohr radius and then implement the variable symmetry case to
# home in on the solution

d03D -s 82 

# Now create a file with just the required command in, note the varable
# symmetry calculation is begun with a lambda of 5 Angstrom less than the
# solution given in the 3D case, just to be sure.  In addition the starting
# value of zeta is assigned as 0.65 and the increment 0.01---could be a
# long hard slog!

nawk 'BEGIN{printf("d0 -w 0.65 -x 0.01 -s ")}{printf("%f",$2-5)}' l.r > d0.job

# and execute it!

./d0.job

# Collate data

echo -n $R_D >> e-r_d.r
echo -n $R_D >> l-r_d.r
echo -n $R_D >> zeta-r_d.r

# Append Bohr radii and zeta parameter of solutions

nawk '{printf(" %e\n",$2)}' e.r >> e-r_d.r
nawk '{printf(" %e\n",$2)}' l.r >> l-r_d.r
nawk '{printf(" %e\n",$2)}' zeta.r >> zeta-r_d.r
}
done
